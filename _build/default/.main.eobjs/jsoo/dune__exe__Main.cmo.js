// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Dune__exe__Main
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Js_of_ocaml_lwt__Lwt_js, Js_of_ocaml_lwt__Lwt_js_events, Lwt, Stdlib, Stdlib__List, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lime$0 = "lime",
    cst_px$5 = "px",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_lwt_Lwt_js = global_data.Js_of_ocaml_lwt__Lwt_js,
    Lwt = global_data.Lwt,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Random = global_data.Stdlib__Random,
    Js_of_ocaml_lwt_Lwt_js_events = global_data.Js_of_ocaml_lwt__Lwt_js_events,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    document = Js_of_ocaml_Dom_html[2],
    world = caml_call1(Js_of_ocaml_Dom_html[4], "world"),
    creets = [0, 0],
    cst_px = cst_px$5,
    cst_px$0 = cst_px$5,
    cst_px$1 = cst_px$5,
    cst_px$2 = cst_px$5,
    cst_px$3 = cst_px$5,
    cst_px$4 = cst_px$5,
    cst_lime = cst_lime$0;
   function move_creet(t13, state){
    if(1 - state[6]){
     var w = world.clientWidth, h = world.clientHeight;
     if(caml_call1(Stdlib_Random[10], 1.) < 0.01){
      var
       new_dx = caml_call1(Stdlib_Random[5], 5) - 2 | 0,
       new_dy = caml_call1(Stdlib_Random[5], 5) - 2 | 0;
      if(0 !== new_dx) state[3] = new_dx;
      if(0 !== new_dy) state[4] = new_dy;
     }
     else{
      var _m_ = 0 === state[3] ? 1 : 0, _n_ = _m_ || (0 === state[4] ? 1 : 0);
      if(_n_){
       var
        _o_ =
          0 === state[3]
           ? caml_call1(Stdlib_Random[11], 0) ? 1 : -1
           : state[3];
       state[3] = _o_;
       var
        _p_ =
          0 === state[4]
           ? caml_call1(Stdlib_Random[11], 0) ? 1 : -1
           : state[4];
       state[4] = _p_;
      }
     }
     var nx = state[1] + state[3] | 0, ny = state[2] + state[4] | 0;
     a:
     {
      if(0 <= nx && (w - 20 | 0) >= nx){
       var nx$0 = nx, dx = state[3];
       break a;
      }
      var
       _q_ = caml_call2(Stdlib[16], w - 20 | 0, nx),
       _r_ = caml_call2(Stdlib[17], 0, _q_),
       nx$0 = _r_,
       dx = - state[3] | 0;
     }
     a:
     {
      if(0 <= ny && (h - 20 | 0) >= ny){
       var ny$0 = ny, dy = state[4];
       break a;
      }
      var
       _s_ = caml_call2(Stdlib[16], h - 20 | 0, ny),
       _t_ = caml_call2(Stdlib[17], 0, _s_),
       ny$0 = _t_,
       dy = - state[4] | 0;
     }
     state[3] = dx;
     state[4] = dy;
     state[1] = nx$0;
     state[2] = ny$0;
     var _u_ = state[2] < 50 ? 1 : 0;
     if(_u_)
      var _v_ = 1 - state[5], _w_ = _v_ ? 1 - state[6] : _v_;
     else
      var _w_ = _u_;
     if(_w_){state[5] = 1; var t15 = t13.style; t15.backgroundColor = "red";}
     var
      _x_ = caml_call1(Stdlib[33], state[1]),
      t17 = caml_jsstring_of_string(caml_call2(Stdlib[28], _x_, cst_px$1)),
      t18 = t13.style;
     t18.left = t17;
     var
      _y_ = caml_call1(Stdlib[33], state[2]),
      t20 = caml_jsstring_of_string(caml_call2(Stdlib[28], _y_, cst_px$2)),
      t21 = t13.style;
     t21.top = t20;
    }
    var
     delay = state[5] ? 0.05 : 0.03,
     ppx_lwt_0 = caml_call1(Js_of_ocaml_lwt_Lwt_js[1], delay);
    return caml_call3
            (Lwt[81],
             function(exn){
              try{throw caml_maybe_attach_backtrace(exn, 0);}
              catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
             },
             ppx_lwt_0,
             function(param){return move_creet(t13, state);});
   }
   function add_creet(color, x, y){
    var t24 = caml_call1(Js_of_ocaml_Dom_html[51], document);
    t24.className = "creet";
    var t3 = caml_jsstring_of_string(color), t4 = t24.style;
    t4.backgroundColor = t3;
    var
     _a_ = caml_call1(Stdlib[33], x),
     t6 = caml_jsstring_of_string(caml_call2(Stdlib[28], _a_, cst_px)),
     t7 = t24.style;
    t7.left = t6;
    var
     _b_ = caml_call1(Stdlib[33], y),
     t9 = caml_jsstring_of_string(caml_call2(Stdlib[28], _b_, cst_px$0)),
     t10 = t24.style;
    t10.top = t9;
    caml_call2(Js_of_ocaml_Dom[5], world, t24);
    var
     v = caml_call1(Stdlib_Random[5], 5) - 2 | 0,
     _c_ = 0,
     _d_ = 0,
     _e_ = 0 === v ? 1 : v,
     v$0 = caml_call1(Stdlib_Random[5], 5) - 2 | 0,
     _f_ = 0 === v$0 ? 1 : v$0,
     state = [0, x, y, _f_, _e_, _d_, _c_];
    creets[1] = [0, [0, t24, state], creets[1]];
    caml_call1(Lwt[11], function(param){return move_creet(t24, state);});
    return caml_call1
            (Lwt[11],
             function(param){
              var
               offset_x = [0, 0],
               offset_y = [0, 0],
               world_rect = [0, world.getBoundingClientRect()];
              caml_call1
               (Lwt[11],
                function(param){
                 return caml_call5
                         (Js_of_ocaml_lwt_Lwt_js_events[82],
                          0,
                          0,
                          0,
                          t24,
                          function(t25, param){
                           state[6] = 1;
                           world_rect[1] = world.getBoundingClientRect();
                           var rect = t24.getBoundingClientRect();
                           offset_x[1] = t25.clientX - rect.left | 0;
                           offset_y[1] = t25.clientY - rect.top | 0;
                           return Lwt[36];
                          });
                });
              caml_call1
               (Lwt[11],
                function(param){
                 return caml_call5
                         (Js_of_ocaml_lwt_Lwt_js_events[83],
                          0,
                          0,
                          0,
                          document,
                          function(param, _i_){
                           var h = world.clientHeight, _j_ = state[6];
                           if(_j_)
                            var
                             _k_ = state[5],
                             _l_ = _k_ ? (h - 70 | 0) < state[2] ? 1 : 0 : _k_;
                           else
                            var _l_ = _j_;
                           if(_l_){
                            state[5] = 0;
                            var t32 = t24.style;
                            t32.backgroundColor = cst_lime$0;
                           }
                           state[6] = 0;
                           return Lwt[36];
                          });
                });
              caml_call1
               (Lwt[11],
                function(param){
                 return caml_call5
                         (Js_of_ocaml_lwt_Lwt_js_events[85],
                          0,
                          0,
                          0,
                          document,
                          function(t33, param){
                           if(state[6]){
                            var
                             t34 = world_rect[1],
                             nx = (t33.clientX - t34.left | 0) - offset_x[1] | 0,
                             ny = (t33.clientY - t34.top | 0) - offset_y[1] | 0;
                            state[1] = nx;
                            state[2] = ny;
                            var
                             _g_ = caml_call1(Stdlib[33], nx),
                             t38 =
                               caml_jsstring_of_string
                                (caml_call2(Stdlib[28], _g_, cst_px$3)),
                             t39 = t24.style;
                            t39.left = t38;
                            var
                             _h_ = caml_call1(Stdlib[33], ny),
                             t41 =
                               caml_jsstring_of_string
                                (caml_call2(Stdlib[28], _h_, cst_px$4)),
                             t42 = t24.style;
                            t42.top = t41;
                           }
                           return Lwt[36];
                          });
                });
              return Lwt[36];
             });
   }
   function reproduction_loop(param){
    var
     healthy_exists =
       caml_call2
        (Stdlib_List[33],
         function(param){var st = param[2]; return 1 - st[5];},
         creets[1]);
    if(healthy_exists && caml_call1(Stdlib_Random[10], 1.) < 0.3){
     var
      x = caml_call1(Stdlib_Random[5], world.clientWidth - 30 | 0),
      y = caml_call1(Stdlib_Random[5], world.clientHeight - 30 | 0);
     add_creet(cst_lime, x, y);
    }
    var ppx_lwt_0 = caml_call1(Js_of_ocaml_lwt_Lwt_js[1], 2.);
    return caml_call3
            (Lwt[81],
             function(exn){
              try{throw caml_maybe_attach_backtrace(exn, 0);}
              catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
             },
             ppx_lwt_0,
             function(param){return reproduction_loop(0);});
   }
   caml_call1(Stdlib_Random[3], 0);
   add_creet(cst_lime$0, 200, 200);
   caml_call1(Lwt[11], reproduction_loop);
   var Dune_exe_Main = [0];
   runtime.caml_register_global(62, Dune_exe_Main, "Dune__exe__Main");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLm1haW4uZW9ianMvanNvby9kdW5lX19leGVfX01haW4uY21vLmpzIiwic2VjdGlvbnMiOlt7Im9mZnNldCI6eyJsaW5lIjo5LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6MywiZmlsZSI6Ii5tYWluLmVvYmpzL2pzb28vZHVuZV9fZXhlX19NYWluLmNtby5qcyIsIm5hbWVzIjpbInJ1bnRpbWUiLCJjc3RfbGltZSIsImNzdF9weCIsImNhbWxfanNzdHJpbmdfb2Zfc3RyaW5nIiwiY2FtbF9tYXliZV9hdHRhY2hfYmFja3RyYWNlIiwiY2FtbF93cmFwX2V4Y2VwdGlvbiIsImNhbWxfY2FsbDEiLCJmIiwiYTAiLCJjYW1sX2NhbGwyIiwiYTEiLCJjYW1sX2NhbGwzIiwiYTIiLCJjYW1sX2NhbGw1IiwiYTMiLCJhNCIsImdsb2JhbF9kYXRhIiwiU3RkbGliIiwiSnNfb2Zfb2NhbWxfbHd0X0x3dF9qcyIsIkx3dCIsIlN0ZGxpYl9MaXN0IiwiU3RkbGliX1JhbmRvbSIsIkpzX29mX29jYW1sX2x3dF9Md3RfanNfZXZlbnRzIiwiSnNfb2Zfb2NhbWxfRG9tX2h0bWwiLCJKc19vZl9vY2FtbF9Eb20iLCJkb2N1bWVudCIsIndvcmxkIiwiY3JlZXRzIiwibW92ZV9jcmVldCIsInQxMyIsInN0YXRlIiwidyIsImgiLCJuZXdfZHgiLCJuZXdfZHkiLCJueCIsIm55IiwiZHgiLCJkeSIsInQxNSIsInQxNyIsInQxOCIsInQyMCIsInQyMSIsImRlbGF5IiwicHB4X2x3dF8wIiwiZXhuIiwicGFyYW0iLCJhZGRfY3JlZXQiLCJjb2xvciIsIngiLCJ5IiwidDI0IiwidDMiLCJ0NCIsInQ2IiwidDciLCJ0OSIsInQxMCIsInYiLCJvZmZzZXRfeCIsIm9mZnNldF95Iiwid29ybGRfcmVjdCIsInQyNSIsInJlY3QiLCJ0MzIiLCJ0MzMiLCJ0MzQiLCJ0MzgiLCJ0MzkiLCJ0NDEiLCJ0NDIiLCJyZXByb2R1Y3Rpb25fbG9vcCIsImhlYWx0aHlfZXhpc3RzIiwic3QiLCJEdW5lX2V4ZV9NYWluIl0sInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiLCIvd29ya3NwYWNlX3Jvb3QvbWFpbi5tbCJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLDBCQUFBO0FBQUEsSUFBQUMsOEJBQUE7QUFBQSxJQUFBQyxzQkFBQTtBQUFBLFlBQUFDLFdBQUFDLEdBQUFDO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBRixHQUFBQyxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsV0FBQUosR0FBQUMsSUFBQUUsSUFBQUU7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFOLEdBQUFDLElBQUFFLElBQUFFLElBQUFFLElBQUFDO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxTQUFBO0FBQUEsSUFBQUMseUJBQUE7QUFBQSxJQUFBQyxNQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsZ0NBQUE7QUFBQSxJQUFBQyx1QkFBQTtBQUFBLElBQUFDLGtCQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLFFDSVk7QUFBQSxJQUFBQyxTQUFtQztBQUFBLElBQUF6QixTQUFBO0FBQUEsSUFBQUEsV0FBQTtBQUFBLElBQUFBLFdBQUE7QUFBQSxJQUFBQSxXQUFBO0FBQUEsSUFBQUEsV0FBQTtBQUFBLElBQUFBLFdBQUE7QUFBQSxJQUFBRCxXQUFBO0FBQUEsWUFBQTJCLFdBQUFDLEtBQUFDO0FBQUFBLElBd0M3QztBQUFBLFNBQUFDLElBQ1UsbUJBQUFDLElBQTRCO0FBQUEsS0FkbkM7QUFBQTtBQUFBLE9BQUFDLFNBQ1k7QUFBQSxPQUFBQyxTQUNBO0FBQUEsTUFDYixpQkFBb0I7QUFBQSxNQUNwQixpQkFBb0I7QUFBQTtBQUFBO0FBQUEsZ0JB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O0FBQUEsNkJBQUFnQztBQUFBQSwrQkFBWDtBQUFBLGlDQUFVO0FBQUEsNkJBQUFDLE1BQTlCO0FBQUE7QUFBQTtBQUFBLG1DQUM4QjtBQUFBLDZCQUFBQztBQUFBQSwrQkFBWDtBQUFBLGlDQUFVO0FBQUEsNkJBQUFDLE1BQTdCO0FBQUE7QUFBQTtBQUFBLDJCQUVGO0FBQUEsMEJBQWUsRUFBQztBQUFBO0FBQUEsY0FDbkI7QUFBQSxhQWdCMEMsRUFBQztBQUFBO0FBQUEsWUFBQUMsa0JBQUF6QjtBQUFBQTtBQUFBQSxLQUFBMEI7QUFBQUEsT0FJdkI7QUFBQTtBQUFBLGtCQUFBMUIsV0FBQTJCLEtBQVksVUFBZ0IsaUJBQWdCO0FBQUE7QUFBQSxJQUNqRSxxQkFDSztBQUFBO0FBQUEsTUFBQXhCLElBQ087QUFBQSxNQUFBQyxJQUNBO0FBQUEsS0FDUjtBQUFBO0FBQUEsUUFBQU4sWUFHUztBQUFBLElBQWI7QUFBQTtBQUFBLHNCQUFBQztBQUFBQSxjQUFBO0FBQUEsb0JBQUFBLFNBQUFBLFFEdEpGLDBCQ3NKRTtBQUFBLGFBQ29CO0FBQUE7QUFBQSxzQkFBQUMsT0FBcEIsMkJBQW9CO0FBQUE7QUFBQSxHQUlwQjtBQUFBLEdBQ0E7QUFBQSxHQUNBO0FBQUEsT0FBQTRCLGdCQUEyQjtBQUFBO0FBQUE7QUFBQSxFRDdKN0IiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgY29kZSAqKSIsIm9wZW4gSnNfb2Zfb2NhbWxcclxub3BlbiBKc19vZl9vY2FtbF9sd3RcclxuXHJcbmxldCBkb2N1bWVudCA9IERvbV9odG1sLmRvY3VtZW50XHJcbmxldCB3b3JsZCA9IERvbV9odG1sLmdldEVsZW1lbnRCeUlkX2V4biBcIndvcmxkXCJcclxuXHJcbigqINCh0L7RgdGC0L7Rj9C90LjQtSDRgdGD0YnQtdGB0YLQstCwICopXHJcbnR5cGUgY3JlZXRfc3RhdGUgPSB7XHJcbiAgbXV0YWJsZSB4OiBpbnQ7XHJcbiAgbXV0YWJsZSB5OiBpbnQ7XHJcbiAgbXV0YWJsZSBkeDogaW50O1xyXG4gIG11dGFibGUgZHk6IGludDtcclxuICBtdXRhYmxlIGluZmVjdGVkOiBib29sO1xyXG4gIG11dGFibGUgaXNfYmVpbmdfZHJhZ2dlZDogYm9vbDtcclxufVxyXG5cclxuKCog0JLRgdC1IENyZWV0J9GLICopXHJcbmxldCBjcmVldHMgOiAoRG9tX2h0bWwuZGl2RWxlbWVudCBKcy50ICogY3JlZXRfc3RhdGUpIGxpc3QgcmVmID0gcmVmIFtdXHJcblxyXG4oKiDQodC+0LfQtNCw0L3QuNC1IERPTS3RjdC70LXQvNC10L3RgtCwICopXHJcbmxldCBjcmVhdGVfY3JlZXQgY29sb3IgeCB5ID1cclxuICBsZXQgZCA9IERvbV9odG1sLmNyZWF0ZURpdiBkb2N1bWVudCBpblxyXG4gIGQjIy5jbGFzc05hbWUgOj0gSnMuc3RyaW5nIFwiY3JlZXRcIjtcclxuICBkIyMuc3R5bGUjIy5iYWNrZ3JvdW5kQ29sb3IgOj0gSnMuc3RyaW5nIGNvbG9yO1xyXG4gIGQjIy5zdHlsZSMjLmxlZnQgOj0gSnMuc3RyaW5nIChzdHJpbmdfb2ZfaW50IHggXiBcInB4XCIpO1xyXG4gIGQjIy5zdHlsZSMjLnRvcCA6PSBKcy5zdHJpbmcgKHN0cmluZ19vZl9pbnQgeSBeIFwicHhcIik7XHJcbiAgRG9tLmFwcGVuZENoaWxkIHdvcmxkIGQ7XHJcbiAgZFxyXG5cclxuKCog0KHQu9GD0YfQsNC50L3QsNGPINC90LXQsdC+0LvRjNGI0LDRjyDRgdC80LXQvdCwINC90LDQv9GA0LDQstC70LXQvdC40Y8gKilcclxubGV0IG1heWJlX2NoYW5nZV9kaXJlY3Rpb24gc3RhdGUgPVxyXG4gIGlmIFJhbmRvbS5mbG9hdCAxLjAgPCAwLjAxIHRoZW4gKCAgKCog0L/RgNC40LzQtdGA0L3QviAxJSDRiNCw0L3RgSDQvdCwINGC0LjQuiAqKVxyXG4gICAgbGV0IG5ld19keCA9IChSYW5kb20uaW50IDUpIC0gMiBpblxyXG4gICAgbGV0IG5ld19keSA9IChSYW5kb20uaW50IDUpIC0gMiBpblxyXG4gICAgaWYgbmV3X2R4IDw+IDAgdGhlbiBzdGF0ZS5keCA8LSBuZXdfZHg7XHJcbiAgICBpZiBuZXdfZHkgPD4gMCB0aGVuIHN0YXRlLmR5IDwtIG5ld19keTtcclxuICApXHJcbiAgZWxzZSBpZiBzdGF0ZS5keCA9IDAgfHwgc3RhdGUuZHkgPSAwIHRoZW4gKCAgKCog0YHRgtGA0LDRhdC+0LLQutCwINC+0YIg4oCc0LfQsNC70LjQv9Cw0L3QuNGP4oCdICopXHJcbiAgICBzdGF0ZS5keCA8LSBpZiBzdGF0ZS5keCA9IDAgdGhlbiAoaWYgUmFuZG9tLmJvb2wgKCkgdGhlbiAxIGVsc2UgLTEpIGVsc2Ugc3RhdGUuZHg7XHJcbiAgICBzdGF0ZS5keSA8LSBpZiBzdGF0ZS5keSA9IDAgdGhlbiAoaWYgUmFuZG9tLmJvb2wgKCkgdGhlbiAxIGVsc2UgLTEpIGVsc2Ugc3RhdGUuZHk7XHJcbiAgKVxyXG5cclxuKCog0JDQstGC0L7QvNCw0YLQuNGH0LXRgdC60L7QtSDQtNCy0LjQttC10L3QuNC1ICopXHJcbmxldCByZWMgbW92ZV9jcmVldCBkIHN0YXRlID1cclxuICBpZiBub3Qgc3RhdGUuaXNfYmVpbmdfZHJhZ2dlZCB0aGVuIChcclxuICAgIGxldCB3ID0gd29ybGQjIy5jbGllbnRXaWR0aCBhbmQgaCA9IHdvcmxkIyMuY2xpZW50SGVpZ2h0IGluXHJcblxyXG4gICAgKCog0KDQtdC00LrQviDQvNC10L3Rj9C10Lwg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSAqKVxyXG4gICAgbWF5YmVfY2hhbmdlX2RpcmVjdGlvbiBzdGF0ZTtcclxuXHJcbiAgICBsZXQgbnggPSBzdGF0ZS54ICsgc3RhdGUuZHggYW5kIG55ID0gc3RhdGUueSArIHN0YXRlLmR5IGluXHJcblxyXG4gICAgbGV0IGR4LCBueCA9XHJcbiAgICAgIGlmIG54IDwgMCB8fCBueCA+IHcgLSAyMCB0aGVuICgtc3RhdGUuZHgsIG1heCAwIChtaW4gKHcgLSAyMCkgbngpKVxyXG4gICAgICBlbHNlIChzdGF0ZS5keCwgbngpXHJcbiAgICBpblxyXG4gICAgbGV0IGR5LCBueSA9XHJcbiAgICAgIGlmIG55IDwgMCB8fCBueSA+IGggLSAyMCB0aGVuICgtc3RhdGUuZHksIG1heCAwIChtaW4gKGggLSAyMCkgbnkpKVxyXG4gICAgICBlbHNlIChzdGF0ZS5keSwgbnkpXHJcbiAgICBpblxyXG5cclxuICAgIHN0YXRlLmR4IDwtIGR4O1xyXG4gICAgc3RhdGUuZHkgPC0gZHk7XHJcbiAgICBzdGF0ZS54IDwtIG54O1xyXG4gICAgc3RhdGUueSA8LSBueTtcclxuXHJcbiAgICAoKiDQl9Cw0YDQsNC20LXQvdC40LUg0LIg0LLQtdGA0YXQvdC10Lkg0LfQvtC90LUg4oCUINGC0L7Qu9GM0LrQviDQtdGB0LvQuCDQvdC1INC/0LXRgNC10YLQsNGB0LrQuNCy0LDQtdGC0YHRjyAqKVxyXG4gICAgaWYgc3RhdGUueSA8IDUwICYmIG5vdCBzdGF0ZS5pbmZlY3RlZCAmJiBub3Qgc3RhdGUuaXNfYmVpbmdfZHJhZ2dlZCB0aGVuIChcclxuICAgICAgc3RhdGUuaW5mZWN0ZWQgPC0gdHJ1ZTtcclxuICAgICAgZCMjLnN0eWxlIyMuYmFja2dyb3VuZENvbG9yIDo9IEpzLnN0cmluZyBcInJlZFwiXHJcbiAgICApO1xyXG5cclxuICAgIGQjIy5zdHlsZSMjLmxlZnQgOj0gSnMuc3RyaW5nIChzdHJpbmdfb2ZfaW50IHN0YXRlLnggXiBcInB4XCIpO1xyXG4gICAgZCMjLnN0eWxlIyMudG9wIDo9IEpzLnN0cmluZyAoc3RyaW5nX29mX2ludCBzdGF0ZS55IF4gXCJweFwiKTtcclxuICApO1xyXG5cclxuICBsZXQgZGVsYXkgPSBpZiBzdGF0ZS5pbmZlY3RlZCB0aGVuIDAuMDUgZWxzZSAwLjAzIGluXHJcbiAgbGV0JWx3dCAoKSA9IEx3dF9qcy5zbGVlcCBkZWxheSBpblxyXG4gIG1vdmVfY3JlZXQgZCBzdGF0ZVxyXG5cclxuKCog0J/QtdGA0LXRgtCw0YHQutC40LLQsNC90LjQtSAqKVxyXG5sZXQgbWFrZV9kcmFnZ2FibGUgZCBzdGF0ZSA9XHJcbiAgbGV0IG9wZW4gTHd0X2pzX2V2ZW50cyBpblxyXG4gIGxldCBvZmZzZXRfeCA9IHJlZiAwIGFuZCBvZmZzZXRfeSA9IHJlZiAwIGluXHJcbiAgbGV0IHdvcmxkX3JlY3QgPSByZWYgKHdvcmxkIyNnZXRCb3VuZGluZ0NsaWVudFJlY3QpIGluXHJcblxyXG4gICgqINCd0LDQttCw0YLQuNC1INC80YvRiNC4IOKAlCDQvdCw0YfQsNGC0Ywg0L/QtdGA0LXRgtCw0YHQutC40LLQsNC90LjQtSAqKVxyXG4gIEx3dC5hc3luYyAoZnVuICgpIC0+XHJcbiAgICBtb3VzZWRvd25zIGQgKGZ1biBldiBfIC0+XHJcbiAgICAgIHN0YXRlLmlzX2JlaW5nX2RyYWdnZWQgPC0gdHJ1ZTtcclxuICAgICAgd29ybGRfcmVjdCA6PSB3b3JsZCMjZ2V0Qm91bmRpbmdDbGllbnRSZWN0O1xyXG4gICAgICBsZXQgcmVjdCA9IGQjI2dldEJvdW5kaW5nQ2xpZW50UmVjdCBpblxyXG4gICAgICBvZmZzZXRfeCA6PSBpbnRfb2ZfZmxvYXQgKGZsb2F0X29mX2ludCBldiMjLmNsaWVudFggLS4gcmVjdCMjLmxlZnQpO1xyXG4gICAgICBvZmZzZXRfeSA6PSBpbnRfb2ZfZmxvYXQgKGZsb2F0X29mX2ludCBldiMjLmNsaWVudFkgLS4gcmVjdCMjLnRvcCk7XHJcbiAgICAgIEx3dC5yZXR1cm5fdW5pdClcclxuICApO1xyXG5cclxuICAoKiDQntGC0L/Rg9GB0LrQsNC90LjQtSDQvNGL0YjQuCDigJQg0LfQsNC60L7QvdGH0LjRgtGMINC/0LXRgNC10YLQsNGB0LrQuNCy0LDQvdC40LUg0Lgg0LLQvtC30LzQvtC20L3QviDQstGL0LvQtdGH0LjRgtGMICopXHJcbiAgTHd0LmFzeW5jIChmdW4gKCkgLT5cclxuICAgIG1vdXNldXBzIGRvY3VtZW50IChmdW4gXyBfIC0+XHJcbiAgICAgIGxldCBoID0gd29ybGQjIy5jbGllbnRIZWlnaHQgaW5cclxuICAgICAgaWYgc3RhdGUuaXNfYmVpbmdfZHJhZ2dlZCAmJiBzdGF0ZS5pbmZlY3RlZCAmJiBzdGF0ZS55ID4gaCAtIDcwIHRoZW4gKFxyXG4gICAgICAgIHN0YXRlLmluZmVjdGVkIDwtIGZhbHNlO1xyXG4gICAgICAgIGQjIy5zdHlsZSMjLmJhY2tncm91bmRDb2xvciA6PSBKcy5zdHJpbmcgXCJsaW1lXCJcclxuICAgICAgKTtcclxuICAgICAgc3RhdGUuaXNfYmVpbmdfZHJhZ2dlZCA8LSBmYWxzZTtcclxuICAgICAgTHd0LnJldHVybl91bml0KVxyXG4gICk7XHJcblxyXG4gICgqINCU0LLQuNC20LXQvdC40LUg0LzRi9GI0Lgg4oCUINC+0LHQvdC+0LLQu9GP0LXQvCDQv9C+0LfQuNGG0LjRjiAqKVxyXG4gIEx3dC5hc3luYyAoZnVuICgpIC0+XHJcbiAgICBtb3VzZW1vdmVzIGRvY3VtZW50IChmdW4gZXYgXyAtPlxyXG4gICAgICBpZiBzdGF0ZS5pc19iZWluZ19kcmFnZ2VkIHRoZW4gKFxyXG4gICAgICAgIGxldCB3ciA9ICF3b3JsZF9yZWN0IGluXHJcbiAgICAgICAgbGV0IG54ID0gaW50X29mX2Zsb2F0IChmbG9hdF9vZl9pbnQgZXYjIy5jbGllbnRYIC0uIHdyIyMubGVmdCkgLSAhb2Zmc2V0X3ggaW5cclxuICAgICAgICBsZXQgbnkgPSBpbnRfb2ZfZmxvYXQgKGZsb2F0X29mX2ludCBldiMjLmNsaWVudFkgLS4gd3IjIy50b3ApIC0gIW9mZnNldF95IGluXHJcbiAgICAgICAgc3RhdGUueCA8LSBueDtcclxuICAgICAgICBzdGF0ZS55IDwtIG55O1xyXG4gICAgICAgIGQjIy5zdHlsZSMjLmxlZnQgOj0gSnMuc3RyaW5nIChzdHJpbmdfb2ZfaW50IG54IF4gXCJweFwiKTtcclxuICAgICAgICBkIyMuc3R5bGUjIy50b3AgOj0gSnMuc3RyaW5nIChzdHJpbmdfb2ZfaW50IG55IF4gXCJweFwiKTtcclxuICAgICAgKTtcclxuICAgICAgTHd0LnJldHVybl91bml0KVxyXG4gICk7XHJcblxyXG4gIEx3dC5yZXR1cm5fdW5pdFxyXG5cclxuKCog0JTQvtCx0LDQstC70LXQvdC40LUg0L3QvtCy0L7Qs9C+IENyZWV0ICopXHJcbmxldCBhZGRfY3JlZXQgY29sb3IgeCB5ID1cclxuICBsZXQgZCA9IGNyZWF0ZV9jcmVldCBjb2xvciB4IHkgaW5cclxuICBsZXQgc3RhdGUgPSB7XHJcbiAgICB4OyB5O1xyXG4gICAgZHggPSAobGV0IHYgPSAoUmFuZG9tLmludCA1KSAtIDIgaW4gaWYgdiA9IDAgdGhlbiAxIGVsc2Ugdik7XHJcbiAgICBkeSA9IChsZXQgdiA9IChSYW5kb20uaW50IDUpIC0gMiBpbiBpZiB2ID0gMCB0aGVuIDEgZWxzZSB2KTtcclxuICAgIGluZmVjdGVkID0gZmFsc2U7XHJcbiAgICBpc19iZWluZ19kcmFnZ2VkID0gZmFsc2U7XHJcbiAgfSBpblxyXG4gIGNyZWV0cyA6PSAoZCwgc3RhdGUpIDo6ICFjcmVldHM7XHJcbiAgTHd0LmFzeW5jIChmdW4gKCkgLT4gbW92ZV9jcmVldCBkIHN0YXRlKTtcclxuICBMd3QuYXN5bmMgKGZ1biAoKSAtPiBtYWtlX2RyYWdnYWJsZSBkIHN0YXRlKVxyXG5cclxuKCog0KDQsNC30LzQvdC+0LbQtdC90LjQtSAqKVxyXG5sZXQgcmVjIHJlcHJvZHVjdGlvbl9sb29wICgpID1cclxuICBsZXQgaGVhbHRoeV9leGlzdHMgPSBMaXN0LmV4aXN0cyAoZnVuIChfLCBzdCkgLT4gbm90IHN0LmluZmVjdGVkKSAhY3JlZXRzIGluXHJcbiAgaWYgaGVhbHRoeV9leGlzdHMgdGhlbiAoXHJcbiAgICBpZiBSYW5kb20uZmxvYXQgMS4wIDwgMC4zIHRoZW4gKFxyXG4gICAgICBsZXQgeCA9IFJhbmRvbS5pbnQgKHdvcmxkIyMuY2xpZW50V2lkdGggLSAzMCkgaW5cclxuICAgICAgbGV0IHkgPSBSYW5kb20uaW50ICh3b3JsZCMjLmNsaWVudEhlaWdodCAtIDMwKSBpblxyXG4gICAgICBhZGRfY3JlZXQgXCJsaW1lXCIgeCB5O1xyXG4gICAgKVxyXG4gICk7XHJcbiAgbGV0JWx3dCAoKSA9IEx3dF9qcy5zbGVlcCAyLjAgaW5cclxuICByZXByb2R1Y3Rpb25fbG9vcCAoKVxyXG5cclxuKCogbWFpbiAqKVxyXG5sZXQgKCkgPVxyXG4gIFJhbmRvbS5zZWxmX2luaXQgKCk7XHJcbiAgYWRkX2NyZWV0IFwibGltZVwiIDIwMCAyMDA7XHJcbiAgTHd0LmFzeW5jIHJlcHJvZHVjdGlvbl9sb29wXHJcbiJdLCJpZ25vcmVMaXN0IjpbMF19fV19
