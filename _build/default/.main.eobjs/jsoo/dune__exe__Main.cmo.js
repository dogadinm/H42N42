// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Dune__exe__Main
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Js_of_ocaml_lwt__Lwt_js, Js_of_ocaml_lwt__Lwt_js_events, Lwt, Stdlib, Stdlib__List, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_20px = "20px",
    cst_lime$0 = "lime",
    cst_px$11 = "px",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_lwt_Lwt_js = global_data.Js_of_ocaml_lwt__Lwt_js,
    Lwt = global_data.Lwt,
    Stdlib_List = global_data.Stdlib__List,
    Js_of_ocaml_lwt_Lwt_js_events = global_data.Js_of_ocaml_lwt__Lwt_js_events,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    document = Js_of_ocaml_Dom_html[2],
    world = caml_call1(Js_of_ocaml_Dom_html[4], "world"),
    creets = [0, 0],
    cst_px = cst_px$11,
    cst_px$0 = cst_px$11,
    cst_px$1 = cst_px$11,
    cst_px$2 = cst_px$11,
    cst_px$3 = cst_px$11,
    cst_px$4 = cst_px$11,
    cst_px$5 = cst_px$11,
    cst_px$6 = cst_px$11,
    cst_px$7 = cst_px$11,
    cst_px$8 = cst_px$11,
    cst_px$9 = cst_px$11,
    cst_px$10 = cst_px$11,
    cst_lime = cst_lime$0;
   function infect_creet(param){
    var st = param[2], t23 = param[1], _O_ = 1 - st[5];
    if(_O_)
     var _P_ = 1 - st[10], _Q_ = _P_ ? 1 - st[9] : _P_;
    else
     var _Q_ = _O_;
    if(_Q_){
     st[5] = 1;
     var t31 = t23.style;
     t31.backgroundColor = "red";
     var r = caml_call1(Stdlib_Random[10], 1.);
     if(r < 0.1){
      st[6] = 1;
      st[7] = 0;
      var t34 = t23.style;
      t34.backgroundColor = "purple";
      return caml_call1
              (Lwt[11],
               function(param){
                var initial_size = st[8], target_size = initial_size * 4 | 0;
                function loop(param){
                 if(st[6] && st[8] < target_size){
                  st[8] = st[8] + 1 | 0;
                  var
                   _V_ = caml_call1(Stdlib[33], st[8]),
                   t24 =
                     caml_jsstring_of_string
                      (caml_call2(Stdlib[28], _V_, cst_px$3)),
                   t25 = t23.style;
                  t25.width = t24;
                  var
                   _W_ = caml_call1(Stdlib[33], st[8]),
                   t27 =
                     caml_jsstring_of_string
                      (caml_call2(Stdlib[28], _W_, cst_px$4)),
                   t28 = t23.style;
                  t28.height = t27;
                  var ppx_lwt_0 = caml_call1(Js_of_ocaml_lwt_Lwt_js[1], 0.2);
                  return caml_call3
                          (Lwt[81],
                           function(exn){
                            try{throw caml_maybe_attach_backtrace(exn, 0);}
                            catch(exn){
                             var exn$0 = caml_wrap_exception(exn);
                             return exn$0;
                            }
                           },
                           ppx_lwt_0,
                           function(param){return loop(0);});
                 }
                 return Lwt[36];
                }
                return loop(0);
               });
     }
     var _R_ = r < 0.2 ? 1 : 0;
     if(_R_){
      st[7] = 1;
      st[6] = 0;
      st[8] = st[8] * 0.85 | 0;
      var t37 = t23.style;
      t37.backgroundColor = "orange";
      var
       _S_ = caml_call1(Stdlib[33], st[8]),
       t39 = caml_jsstring_of_string(caml_call2(Stdlib[28], _S_, cst_px$5)),
       t40 = t23.style;
      t40.width = t39;
      var
       _T_ = caml_call1(Stdlib[33], st[8]),
       t42 = caml_jsstring_of_string(caml_call2(Stdlib[28], _T_, cst_px$6)),
       t43 = t23.style;
      return t43.height = t42;
     }
     var _U_ = _R_;
    }
    else
     var _U_ = _Q_;
    return _U_;
   }
   function move_creet(t46, st1){
    if(1 - st1[9]){
     if(st1[7]){
      var best = [0, 0], min_d = [0, Stdlib[19]];
      caml_call2
       (Stdlib_List[17],
        function(param){
         var
          other = param[2],
          _J_ = 1 - other[5],
          _K_ = _J_ ? 1 - other[9] : _J_;
         if(_K_)
          var
           dx = other[1] - st1[1] | 0,
           dy = other[2] - st1[2] | 0,
           d = caml_mul(dx, dx) + caml_mul(dy, dy) | 0,
           _L_ = d < min_d[1] ? 1 : 0,
           _M_ = _L_ ? (min_d[1] = d, best[1] = [0, other], 0) : _L_,
           _N_ = _M_;
         else
          var _N_ = _K_;
         return _N_;
        },
        creets[1]);
      var match = best[1];
      if(match){
       var t = match[1], dx = t[1] - st1[1] | 0, dy = t[2] - st1[2] | 0;
       if(0 !== dx){var _p_ = 0 < dx ? 2 : -2; st1[3] = _p_;}
       if(0 !== dy){var _q_ = 0 < dy ? 2 : -2; st1[4] = _q_;}
      }
     }
     if(caml_call1(Stdlib_Random[10], 1.) < 0.01){
      st1[3] = caml_call1(Stdlib_Random[5], 5) - 2 | 0;
      st1[4] = caml_call1(Stdlib_Random[5], 5) - 2 | 0;
     }
     var
      w = world.clientWidth,
      h = world.clientHeight,
      nx = st1[1] + st1[3] | 0,
      ny = st1[2] + st1[4] | 0;
     a:
     {
      if(0 <= nx && (w - st1[8] | 0) >= nx){
       var nx$0 = nx, dx$0 = st1[3];
       break a;
      }
      var
       _r_ = caml_call2(Stdlib[16], w - st1[8] | 0, nx),
       _s_ = caml_call2(Stdlib[17], 0, _r_),
       nx$0 = _s_,
       dx$0 = - st1[3] | 0;
     }
     a:
     {
      if(0 <= ny && (h - st1[8] | 0) >= ny){
       var ny$0 = ny, dy$0 = st1[4];
       break a;
      }
      var
       _t_ = caml_call2(Stdlib[16], h - st1[8] | 0, ny),
       _u_ = caml_call2(Stdlib[17], 0, _t_),
       ny$0 = _u_,
       dy$0 = - st1[4] | 0;
     }
     st1[3] = dx$0;
     st1[4] = dy$0;
     st1[1] = nx$0;
     st1[2] = ny$0;
     var _v_ = st1[2] < 50 ? 1 : 0;
     if(_v_)
      var _w_ = 1 - st1[5], _x_ = _w_ ? 1 - st1[10] : _w_;
     else
      var _x_ = _v_;
     if(_x_) infect_creet([0, t46, st1]);
     var _y_ = st1[5];
     if(_y_)
      var _z_ = st1[9], _A_ = _z_ ? (h - 70 | 0) < st1[2] ? 1 : 0 : _z_;
     else
      var _A_ = _y_;
     if(_A_){
      st1[5] = 0;
      st1[6] = 0;
      st1[7] = 0;
      st1[8] = 20;
      var t48 = t46.style;
      t48.backgroundColor = cst_lime$0;
      var t51 = t46.style;
      t51.width = cst_20px;
      var t54 = t46.style;
      t54.height = cst_20px;
     }
     var
      _B_ = caml_call1(Stdlib[33], st1[1]),
      t56 = caml_jsstring_of_string(caml_call2(Stdlib[28], _B_, cst_px$7)),
      t57 = t46.style;
     t57.left = t56;
     var
      _C_ = caml_call1(Stdlib[33], st1[2]),
      t59 = caml_jsstring_of_string(caml_call2(Stdlib[28], _C_, cst_px$8)),
      t60 = t46.style;
     t60.top = t59;
    }
    if(st1[5])
     caml_call2
      (Stdlib_List[17],
       function(param){
        var st2 = param[2], d2 = param[1], _E_ = 1 - st2[5];
        if(_E_)
         var _F_ = 1 - st2[10], _G_ = _F_ ? 1 - st2[9] : _F_;
        else
         var _G_ = _E_;
        if(_G_){
         var
          r1 = st1[8] / 2 | 0,
          r2 = st2[8] / 2 | 0,
          dx = (st1[1] + r1 | 0) - (st2[1] + r2 | 0) | 0,
          dy = (st1[2] + r1 | 0) - (st2[2] + r2 | 0) | 0,
          dist2 = caml_mul(dx, dx) + caml_mul(dy, dy) | 0,
          _D_ = dist2 < caml_mul(r1 + r2 | 0, r1 + r2 | 0) ? 1 : 0,
          _H_ = _D_ ? caml_call1(Stdlib_Random[10], 1.) < 0.02 ? 1 : 0 : _D_;
         if(_H_) return infect_creet([0, d2, st2]);
         var _I_ = _H_;
        }
        else
         var _I_ = _G_;
        return _I_;
       },
       creets[1]);
    var
     delay = st1[5] ? 0.05 : 0.03,
     ppx_lwt_0 = caml_call1(Js_of_ocaml_lwt_Lwt_js[1], delay);
    return caml_call3
            (Lwt[81],
             function(exn){
              try{throw caml_maybe_attach_backtrace(exn, 0);}
              catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
             },
             ppx_lwt_0,
             function(param){return move_creet(t46, st1);});
   }
   function add_creet(color, x, y){
    var size = 20, t11 = caml_call1(Js_of_ocaml_Dom_html[51], document);
    t11.className = "creet";
    var t3 = caml_jsstring_of_string(color), t4 = t11.style;
    t4.backgroundColor = t3;
    var t7 = t11.style;
    t7.position = "absolute";
    var
     _b_ = caml_call1(Stdlib[33], size),
     t9 = caml_jsstring_of_string(caml_call2(Stdlib[28], _b_, cst_px)),
     t10 = t11.style;
    t10.width = t9;
    var
     _c_ = caml_call1(Stdlib[33], size),
     t12 = caml_jsstring_of_string(caml_call2(Stdlib[28], _c_, cst_px$0)),
     t13 = t11.style;
    t13.height = t12;
    var t16 = t11.style;
    t16.borderRadius = "50%";
    var
     _d_ = caml_call1(Stdlib[33], x),
     t18 = caml_jsstring_of_string(caml_call2(Stdlib[28], _d_, cst_px$1)),
     t19 = t11.style;
    t19.left = t18;
    var
     _e_ = caml_call1(Stdlib[33], y),
     t21 = caml_jsstring_of_string(caml_call2(Stdlib[28], _e_, cst_px$2)),
     t22 = t11.style;
    t22.top = t21;
    caml_call2(Js_of_ocaml_Dom[5], world, t11);
    var
     v = caml_call1(Stdlib_Random[5], 5) - 2 | 0,
     _f_ = 0,
     _g_ = 0,
     _h_ = 0,
     _i_ = 0,
     _j_ = 0,
     _k_ = 0 === v ? 1 : v,
     v$0 = caml_call1(Stdlib_Random[5], 5) - 2 | 0,
     _l_ = 0 === v$0 ? 1 : v$0,
     st = [0, x, y, _l_, _k_, _j_, _i_, _h_, size, _g_, _f_];
    creets[1] = [0, [0, t11, st], creets[1]];
    caml_call1(Lwt[11], function(param){return move_creet(t11, st);});
    return caml_call1
            (Lwt[11],
             function(param){
              var
               offset_x = [0, 0],
               offset_y = [0, 0],
               world_rect = [0, world.getBoundingClientRect()];
              caml_call1
               (Lwt[11],
                function(param){
                 return caml_call5
                         (Js_of_ocaml_lwt_Lwt_js_events[82],
                          0,
                          0,
                          0,
                          t11,
                          function(t64, param){
                           st[9] = 1;
                           st[10] = 1;
                           world_rect[1] = world.getBoundingClientRect();
                           var rect = t11.getBoundingClientRect();
                           offset_x[1] = t64.clientX - rect.left | 0;
                           offset_y[1] = t64.clientY - rect.top | 0;
                           return Lwt[36];
                          });
                });
              caml_call1
               (Lwt[11],
                function(param){
                 return caml_call5
                         (Js_of_ocaml_lwt_Lwt_js_events[83],
                          0,
                          0,
                          0,
                          document,
                          function(param, _o_){st[9] = 0; st[10] = 0; return Lwt[36];});
                });
              caml_call1
               (Lwt[11],
                function(param){
                 return caml_call5
                         (Js_of_ocaml_lwt_Lwt_js_events[85],
                          0,
                          0,
                          0,
                          document,
                          function(t68, param){
                           if(st[9]){
                            var
                             t69 = world_rect[1],
                             nx = (t68.clientX - t69.left | 0) - offset_x[1] | 0,
                             ny = (t68.clientY - t69.top | 0) - offset_y[1] | 0;
                            st[1] = nx;
                            st[2] = ny;
                            var
                             _m_ = caml_call1(Stdlib[33], nx),
                             t73 =
                               caml_jsstring_of_string
                                (caml_call2(Stdlib[28], _m_, cst_px$9)),
                             t74 = t11.style;
                            t74.left = t73;
                            var
                             _n_ = caml_call1(Stdlib[33], ny),
                             t76 =
                               caml_jsstring_of_string
                                (caml_call2(Stdlib[28], _n_, cst_px$10)),
                             t77 = t11.style;
                            t77.top = t76;
                           }
                           return Lwt[36];
                          });
                });
              return Lwt[36];
             });
   }
   function reproduction_loop(param){
    var
     healthy_exists =
       caml_call2
        (Stdlib_List[33],
         function(param){var st = param[2]; return 1 - st[5];},
         creets[1]),
     _a_ =
       healthy_exists
        ? caml_call1(Stdlib_Random[10], 1.) < 0.3 ? 1 : 0
        : healthy_exists;
    if(_a_){
     var
      x = caml_call1(Stdlib_Random[5], world.clientWidth - 30 | 0),
      y = caml_call1(Stdlib_Random[5], world.clientHeight - 30 | 0);
     add_creet(cst_lime, x, y);
    }
    var ppx_lwt_0 = caml_call1(Js_of_ocaml_lwt_Lwt_js[1], 2.);
    return caml_call3
            (Lwt[81],
             function(exn){
              try{throw caml_maybe_attach_backtrace(exn, 0);}
              catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
             },
             ppx_lwt_0,
             function(param){return reproduction_loop(0);});
   }
   caml_call1(Stdlib_Random[3], 0);
   add_creet(cst_lime$0, 200, 200);
   caml_call1(Lwt[11], reproduction_loop);
   var Dune_exe_Main = [0];
   runtime.caml_register_global(104, Dune_exe_Main, "Dune__exe__Main");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
