// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Dune__exe__Main
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Js_of_ocaml_lwt__Lwt_js, Js_of_ocaml_lwt__Lwt_js_events, Lwt, Stdlib, Stdlib__List, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lime$1 = "lime",
    cst_px$5 = "px",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_lwt_Lwt_js = global_data.Js_of_ocaml_lwt__Lwt_js,
    Lwt = global_data.Lwt,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Random = global_data.Stdlib__Random,
    Js_of_ocaml_lwt_Lwt_js_events = global_data.Js_of_ocaml_lwt__Lwt_js_events,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    document = Js_of_ocaml_Dom_html[2],
    world = caml_call1(Js_of_ocaml_Dom_html[4], "world"),
    creets = [0, 0],
    cst_px = cst_px$5,
    cst_px$0 = cst_px$5,
    cst_red = "red",
    cst_px$1 = cst_px$5,
    cst_px$2 = cst_px$5,
    cst_lime = cst_lime$1,
    cst_px$3 = cst_px$5,
    cst_px$4 = cst_px$5,
    cst_lime$0 = cst_lime$1;
   function move_creet(t13, state){
    if(1 - state[6]){
     var w = world.clientWidth, h = world.clientHeight;
     if(caml_call1(Stdlib_Random[10], 1.) < 0.01){
      var
       new_dx = caml_call1(Stdlib_Random[5], 5) - 2 | 0,
       new_dy = caml_call1(Stdlib_Random[5], 5) - 2 | 0;
      if(0 !== new_dx) state[3] = new_dx;
      if(0 !== new_dy) state[4] = new_dy;
     }
     else{
      var _m_ = 0 === state[3] ? 1 : 0, _n_ = _m_ || (0 === state[4] ? 1 : 0);
      if(_n_){
       var
        _o_ =
          0 === state[3]
           ? caml_call1(Stdlib_Random[11], 0) ? 1 : -1
           : state[3];
       state[3] = _o_;
       var
        _p_ =
          0 === state[4]
           ? caml_call1(Stdlib_Random[11], 0) ? 1 : -1
           : state[4];
       state[4] = _p_;
      }
     }
     var nx = state[1] + state[3] | 0, ny = state[2] + state[4] | 0;
     a:
     {
      if(0 <= nx && (w - 20 | 0) >= nx){
       var nx$0 = nx, dx = state[3];
       break a;
      }
      var
       _q_ = caml_call2(Stdlib[16], w - 20 | 0, nx),
       _r_ = caml_call2(Stdlib[17], 0, _q_),
       nx$0 = _r_,
       dx = - state[3] | 0;
     }
     a:
     {
      if(0 <= ny && (h - 20 | 0) >= ny){
       var ny$0 = ny, dy = state[4];
       break a;
      }
      var
       _s_ = caml_call2(Stdlib[16], h - 20 | 0, ny),
       _t_ = caml_call2(Stdlib[17], 0, _s_),
       ny$0 = _t_,
       dy = - state[4] | 0;
     }
     state[3] = dx;
     state[4] = dy;
     state[1] = nx$0;
     state[2] = ny$0;
     var _u_ = state[2] < 50 ? 1 : 0;
     if(_u_)
      var _v_ = 1 - state[5], _w_ = _v_ ? 1 - state[6] : _v_;
     else
      var _w_ = _u_;
     if(_w_) state[5] = 1;
     if(state[5])
      caml_call2
       (Stdlib_List[17],
        function(param){
         var
          other = param[2],
          _C_ = 1 - other[5],
          _D_ = _C_ ? 1 - other[6] : _C_;
         if(_D_)
          var
           _A_ = caml_call1(Stdlib[18], state[1] - other[1] | 0) < 20 ? 1 : 0,
           _B_ =
             _A_
              ? caml_call1(Stdlib[18], state[2] - other[2] | 0) < 20 ? 1 : 0
              : _A_,
           _E_ = _B_ ? caml_call1(Stdlib_Random[10], 1.) < 0.3 ? 1 : 0 : _B_,
           _F_ = _E_ ? (other[5] = 1, 0) : _E_;
         else
          var _F_ = _D_;
         return _F_;
        },
        creets[1]);
     var
      _x_ = state[5] ? cst_red : cst_lime,
      t14 = caml_jsstring_of_string(_x_),
      t15 = t13.style;
     t15.backgroundColor = t14;
     var
      _y_ = caml_call1(Stdlib[33], state[1]),
      t17 = caml_jsstring_of_string(caml_call2(Stdlib[28], _y_, cst_px$1)),
      t18 = t13.style;
     t18.left = t17;
     var
      _z_ = caml_call1(Stdlib[33], state[2]),
      t20 = caml_jsstring_of_string(caml_call2(Stdlib[28], _z_, cst_px$2)),
      t21 = t13.style;
     t21.top = t20;
    }
    var
     delay = state[5] ? 0.05 : 0.03,
     ppx_lwt_0 = caml_call1(Js_of_ocaml_lwt_Lwt_js[1], delay);
    return caml_call3
            (Lwt[81],
             function(exn){
              try{throw caml_maybe_attach_backtrace(exn, 0);}
              catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
             },
             ppx_lwt_0,
             function(param){return move_creet(t13, state);});
   }
   function add_creet(color, x, y){
    var t24 = caml_call1(Js_of_ocaml_Dom_html[51], document);
    t24.className = "creet";
    var t3 = caml_jsstring_of_string(color), t4 = t24.style;
    t4.backgroundColor = t3;
    var
     _a_ = caml_call1(Stdlib[33], x),
     t6 = caml_jsstring_of_string(caml_call2(Stdlib[28], _a_, cst_px)),
     t7 = t24.style;
    t7.left = t6;
    var
     _b_ = caml_call1(Stdlib[33], y),
     t9 = caml_jsstring_of_string(caml_call2(Stdlib[28], _b_, cst_px$0)),
     t10 = t24.style;
    t10.top = t9;
    caml_call2(Js_of_ocaml_Dom[5], world, t24);
    var
     v = caml_call1(Stdlib_Random[5], 5) - 2 | 0,
     _c_ = 0,
     _d_ = 0,
     _e_ = 0 === v ? 1 : v,
     v$0 = caml_call1(Stdlib_Random[5], 5) - 2 | 0,
     _f_ = 0 === v$0 ? 1 : v$0,
     state = [0, x, y, _f_, _e_, _d_, _c_];
    creets[1] = [0, [0, t24, state], creets[1]];
    caml_call1(Lwt[11], function(param){return move_creet(t24, state);});
    return caml_call1
            (Lwt[11],
             function(param){
              var
               offset_x = [0, 0],
               offset_y = [0, 0],
               world_rect = [0, world.getBoundingClientRect()];
              caml_call1
               (Lwt[11],
                function(param){
                 return caml_call5
                         (Js_of_ocaml_lwt_Lwt_js_events[82],
                          0,
                          0,
                          0,
                          t24,
                          function(t25, param){
                           state[6] = 1;
                           world_rect[1] = world.getBoundingClientRect();
                           var rect = t24.getBoundingClientRect();
                           offset_x[1] = t25.clientX - rect.left | 0;
                           offset_y[1] = t25.clientY - rect.top | 0;
                           return Lwt[36];
                          });
                });
              caml_call1
               (Lwt[11],
                function(param){
                 return caml_call5
                         (Js_of_ocaml_lwt_Lwt_js_events[83],
                          0,
                          0,
                          0,
                          document,
                          function(param, _i_){
                           var h = world.clientHeight, _j_ = state[6];
                           if(_j_)
                            var
                             _k_ = state[5],
                             _l_ = _k_ ? (h - 70 | 0) < state[2] ? 1 : 0 : _k_;
                           else
                            var _l_ = _j_;
                           if(_l_) state[5] = 0;
                           state[6] = 0;
                           return Lwt[36];
                          });
                });
              caml_call1
               (Lwt[11],
                function(param){
                 return caml_call5
                         (Js_of_ocaml_lwt_Lwt_js_events[85],
                          0,
                          0,
                          0,
                          document,
                          function(t30, param){
                           if(state[6]){
                            var
                             t31 = world_rect[1],
                             nx = (t30.clientX - t31.left | 0) - offset_x[1] | 0,
                             ny = (t30.clientY - t31.top | 0) - offset_y[1] | 0;
                            state[1] = nx;
                            state[2] = ny;
                            var
                             _g_ = caml_call1(Stdlib[33], nx),
                             t35 =
                               caml_jsstring_of_string
                                (caml_call2(Stdlib[28], _g_, cst_px$3)),
                             t36 = t24.style;
                            t36.left = t35;
                            var
                             _h_ = caml_call1(Stdlib[33], ny),
                             t38 =
                               caml_jsstring_of_string
                                (caml_call2(Stdlib[28], _h_, cst_px$4)),
                             t39 = t24.style;
                            t39.top = t38;
                           }
                           return Lwt[36];
                          });
                });
              return Lwt[36];
             });
   }
   function reproduction_loop(param){
    var
     healthy_exists =
       caml_call2
        (Stdlib_List[33],
         function(param){var st = param[2]; return 1 - st[5];},
         creets[1]);
    if(healthy_exists && caml_call1(Stdlib_Random[10], 1.) < 0.3){
     var
      x = caml_call1(Stdlib_Random[5], world.clientWidth - 30 | 0),
      y = caml_call1(Stdlib_Random[5], world.clientHeight - 30 | 0);
     add_creet(cst_lime$0, x, y);
    }
    var ppx_lwt_0 = caml_call1(Js_of_ocaml_lwt_Lwt_js[1], 2.);
    return caml_call3
            (Lwt[81],
             function(exn){
              try{throw caml_maybe_attach_backtrace(exn, 0);}
              catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
             },
             ppx_lwt_0,
             function(param){return reproduction_loop(0);});
   }
   caml_call1(Stdlib_Random[3], 0);
   add_creet(cst_lime$1, 200, 200);
   caml_call1(Lwt[11], reproduction_loop);
   var Dune_exe_Main = [0];
   runtime.caml_register_global(62, Dune_exe_Main, "Dune__exe__Main");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
