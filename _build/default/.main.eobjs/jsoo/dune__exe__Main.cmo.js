// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Dune__exe__Main
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Js_of_ocaml_lwt__Lwt_js, Js_of_ocaml_lwt__Lwt_js_events, Lwt, Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lime = "lime",
    cst_px$3 = "px",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_lwt_Lwt_js = global_data.Js_of_ocaml_lwt__Lwt_js,
    Lwt = global_data.Lwt,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Js_of_ocaml_lwt_Lwt_js_events = global_data.Js_of_ocaml_lwt__Lwt_js_events,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    document = Js_of_ocaml_Dom_html[2],
    world = caml_call1(Js_of_ocaml_Dom_html[4], "world"),
    cst_px = cst_px$3,
    cst_px$0 = cst_px$3;
   function move_creet(t16, state){
    if(1 - state[6]){
     var
      w = world.clientWidth,
      h = world.clientHeight,
      nx = state[1] + state[3] | 0,
      ny = state[2] + state[4] | 0;
     a:
     {
      if(0 <= nx && (w - 20 | 0) >= nx){
       var nx$0 = nx, dx = state[3];
       break a;
      }
      var
       _g_ = caml_call2(Stdlib[16], w - 20 | 0, nx),
       _h_ = caml_call2(Stdlib[17], 0, _g_),
       nx$0 = _h_,
       dx = - state[3] | 0;
     }
     a:
     {
      if(0 <= ny && (h - 20 | 0) >= ny){
       var ny$0 = ny, dy = state[4];
       break a;
      }
      var
       _i_ = caml_call2(Stdlib[16], h - 20 | 0, ny),
       _j_ = caml_call2(Stdlib[17], 0, _i_),
       ny$0 = _j_,
       dy = - state[4] | 0;
     }
     state[3] = dx;
     state[4] = dy;
     state[1] = nx$0;
     state[2] = ny$0;
     a:
     {
      if(50 > state[2] && ! state[5]){
       var t15 = t16.style;
       t15.backgroundColor = "red";
       var infected = 1;
       break a;
      }
      if(state[5] && (h - 70 | 0) < state[2]){
       var t18 = t16.style;
       t18.backgroundColor = cst_lime;
       var infected = 0;
       break a;
      }
      var infected = state[5];
     }
     state[5] = infected;
     var
      _k_ = caml_call1(Stdlib[33], state[1]),
      t20 = caml_jsstring_of_string(caml_call2(Stdlib[28], _k_, cst_px)),
      t21 = t16.style;
     t21.left = t20;
     var
      _l_ = caml_call1(Stdlib[33], state[2]),
      t23 = caml_jsstring_of_string(caml_call2(Stdlib[28], _l_, cst_px$0)),
      t24 = t16.style;
     t24.top = t23;
    }
    var
     delay = state[5] ? 0.05 : 0.03,
     ppx_lwt_0 = caml_call1(Js_of_ocaml_lwt_Lwt_js[1], delay);
    return caml_call3
            (Lwt[81],
             function(exn){
              try{throw caml_maybe_attach_backtrace(exn, 0);}
              catch(exn){var exn$0 = caml_wrap_exception(exn); return exn$0;}
             },
             ppx_lwt_0,
             function(param){return move_creet(t16, state);});
   }
   var t27 = caml_call1(Js_of_ocaml_Dom_html[51], document);
   t27.className = "creet";
   var t4 = t27.style;
   t4.backgroundColor = cst_lime;
   var
    _a_ = caml_call1(Stdlib[33], 200),
    t6 = caml_jsstring_of_string(caml_call2(Stdlib[28], _a_, cst_px$3)),
    t7 = t27.style;
   t7.left = t6;
   var
    _b_ = caml_call1(Stdlib[33], 200),
    t9 = caml_jsstring_of_string(caml_call2(Stdlib[28], _b_, cst_px$3)),
    t10 = t27.style;
   t10.top = t9;
   caml_call2(Js_of_ocaml_Dom[5], world, t27);
   var initial_state = [0, 200, 200, 3, 2, 0, 0];
   caml_call1
    (Lwt[11], function(param){return move_creet(t27, initial_state);});
   var
    cst_px$1 = cst_px$3,
    cst_px$2 = cst_px$3,
    _c_ =
      [0,
       [11, "Dragging to: x=", [4, 0, 0, 0, [11, ", y=", [4, 0, 0, 0, 0]]]],
       "Dragging to: x=%d, y=%d"];
   caml_call1
    (Lwt[11],
     function(param){
      var
       offset_x = [0, 0],
       offset_y = [0, 0],
       world_rect = [0, world.getBoundingClientRect()];
      caml_call1
       (Lwt[11],
        function(param){
         return caml_call5
                 (Js_of_ocaml_lwt_Lwt_js_events[82],
                  0,
                  0,
                  0,
                  t27,
                  function(t28, param){
                   initial_state[6] = 1;
                   world_rect[1] = world.getBoundingClientRect();
                   var rect = t27.getBoundingClientRect();
                   offset_x[1] = t28.clientX - rect.left | 0;
                   offset_y[1] = t28.clientY - rect.top | 0;
                   return Lwt[36];
                  });
        });
      caml_call1
       (Lwt[11],
        function(param){
         return caml_call5
                 (Js_of_ocaml_lwt_Lwt_js_events[83],
                  0,
                  0,
                  0,
                  document,
                  function(param, _f_){initial_state[6] = 0; return Lwt[36];});
        });
      caml_call1
       (Lwt[11],
        function(param){
         return caml_call5
                 (Js_of_ocaml_lwt_Lwt_js_events[85],
                  0,
                  0,
                  0,
                  document,
                  function(t32, param){
                   if(initial_state[6]){
                    var
                     t33 = world_rect[1],
                     nx = (t32.clientX - t33.left | 0) - offset_x[1] | 0,
                     ny = (t32.clientY - t33.top | 0) - offset_y[1] | 0;
                    initial_state[1] = nx;
                    initial_state[2] = ny;
                    var
                     _d_ = caml_call1(Stdlib[33], nx),
                     t37 =
                       caml_jsstring_of_string
                        (caml_call2(Stdlib[28], _d_, cst_px$1)),
                     t38 = t27.style;
                    t38.left = t37;
                    var
                     _e_ = caml_call1(Stdlib[33], ny),
                     t40 =
                       caml_jsstring_of_string
                        (caml_call2(Stdlib[28], _e_, cst_px$2)),
                     t41 = t27.style;
                    t41.top = t40;
                    var
                     t42 =
                       caml_jsstring_of_string
                        (caml_call3(Stdlib_Printf[4], _c_, nx, ny)),
                     t43 = Js_of_ocaml_Firebug[1];
                    t43.log(t42);
                   }
                   return Lwt[36];
                  });
        });
      return Lwt[36];
     });
   var Dune_exe_Main = [0];
   runtime.caml_register_global(55, Dune_exe_Main, "Dune__exe__Main");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
